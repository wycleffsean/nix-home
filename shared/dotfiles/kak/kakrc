colorscheme snazzy

# Use ripgrep instead of grep
set-option global grepcmd 'rg -Hn --no-heading'

# useful Kakoune articles
# https://zork.net/~st/jottings/Intro_to_Kakoune_completions.html

# Links/comments/other
# - https://github.com/martanne/vis
# - http://sam.cat-v.org/
# - https://gist.github.com/Screwtapello/563628f777f0fc9f4d5fb681058d63ec

evaluate-commands %sh{
    plugins="$kak_config/plugins"
    mkdir -p "$plugins"
    [ ! -e "$plugins/plug.kak" ] && \
        git clone -q https://github.com/andreyorst/plug.kak.git "$plugins/plug.kak"
    printf "%s\n" "source '$plugins/plug.kak/rc/plug.kak'"
}

plug "andreyorst/plug.kak" noload
plug "andreyorst/fzf.kak" config %{

# enable line numbers
# 	only for normal buffers
    map -docstring 'fzf mode' global normal '<c-p>' ': fzf-mode<ret>'
} demand fzf %{
} demand fzf-file %{
    set-option global fzf_file_command 'rg' # 'ag', 'fd', or 'find'
} demand fzf-grep %{
    # set-option global fzf_grep_command %opt{grepcmd}
    set-option global fzf_grep_command 'rg'
    set-option global fzf_grep_preview_command 'bat'
}
plug "andreyorst/powerline.kak" defer powerline_gruvbox %{
   powerline-theme gruvbox
} config %{
   powerline-start
}

# We use package manager to install kak-lsp instead of plug
#plug "kak-lsp/kak-lsp" do %{
#	cargo install --locked --force --path .
#        # optional: if you want to use specific language servers
#	mkdir -p ~/.config/kak-lsp
#	cp -n kak-lsp.toml ~/.config/kak-lsp/
#}

# connect kak-lsp to the kakoune session
eval %sh{kak-lsp --kakoune -s $kak_session}
lsp-enable # is this needed?

# Display tooltip for every command in normal mode
set-option -add global autoinfo normal


# enable line numbers
#       only for normal buffers
#hook global WinCreate ^[^*]+$ %{ add-highlighter window number-lines }
add-highlighter global/ number-lines -relative -hlcursor -cursor-separator '>'
add-highlighter global/ wrap -word -indent

# enable for all languages that we want to use the LSP, here we're enabling C++ and Zig.
hook global WinSetOption filetype=(cpp|zig|ruby) %{
    lsp-enable-window
    # the options below are optional (and self-explanatory)
    set-option window lsp_auto_show_code_actions true
    # lsp-code-actions-enable
    lsp-auto-hover-enable
    lsp-auto-signature-help-enable
    lsp-auto-hover-insert-mode-disable
}

# configure zls: we enable zig fmt, reference and semantic highlighting
hook global WinSetOption filetype=zig %{
    set-option buffer formatcmd 'zig fmt --stdin'
    set-option window lsp_auto_highlight_references true
    set-option global lsp_server_configuration zls.zig_lib_path="/usr/lib/zig"
    set-option -add global lsp_server_configuration zls.warn_style=true
    set-option -add global lsp_server_configuration zls.enable_semantic_tokens=true
    hook window -group semantic-tokens BufReload .* lsp-semantic-tokens
    hook window -group semantic-tokens NormalIdle .* lsp-semantic-tokens
    hook window -group semantic-tokens InsertIdle .* lsp-semantic-tokens
    hook -once -always window WinSetOption filetype=.* %{
        remove-hooks window semantic-tokens
    }
}

hook global BufSetOption filetype=zig %{
    set-option buffer lintcmd 'zig fmt --color off --ast-check 2>&1'
    # To enable auto linting on buffer write
    #hook -group zig-auto-lint buffer BufWritePre .* lint-buffer
    hook -group zig-auto-lint buffer BufWritePre .* lsp-formatting-sync
}

# Ruby linting
hook global WinSetOption filetype=ruby %{
    set-option window lintcmd 'bin/standardrb --display-cop-names --force-exclusion --format emacs --cache false'
    hook window -group ruby-lint BufReload .* lint-buffer
    hook window -group ruby-lint BufWritePost .* lint-buffer
    # These are way too slow
    # hook window -group ruby-lint NormalIdle .* lint-buffer
    # hook window -group ruby-lint InsertIdle .* lint-buffer
    hook -once -always window WinSetOption filetype=.* %{
        remove-hooks window ruby-lint
    }
}

hook global BufSetOption filetype=ruby %{
    map buffer user 't' :ruby-alternative-file<ret> -docstring 'Switch to alternative file (e.g. test)'
    set-option	buffer indentwidth 2
}


# hook -group rake-commands global WinSetOption filetype=ruby %{
#     evaluate-commands %sh{
#         rake -T | tr ':' '-'
#     }
# }

define-command nnn -params .. -docstring 'nnn: open an nnn file browser' %{
    # NNN_OPENER='kak -c %val{session}'
    # terminal nnn -e
    tmux-terminal-horizontal "KAK_SESSION=%val{session} KAK_CLIENT=%val{client} nnn"
}

define-command nnn-current -params 0..1 -file-completion -docstring 'Open file with nnn (volatile)' %{
    wezterm-terminal-window sh -c %{
        kak_buffile=$1 kak_session=$2 kak_client=$3
        shift 3
        kak_pwd="${@:-$(dirname "${kak_buffile}")}"
        filename=$(nnn -p - "${kak_pwd}")
        kak_cmd="evaluate-commands -client $kak_client edit $filename"
        echo $kak_cmd | kak -p $kak_session
    } -- %val{buffile} %val{session} %val{client} %arg{@}
}

# Silly stuff

define-command -docstring 'Get weather from wttr.in' weather %{
    evaluate-commands -no-hooks %sh{
        output=$(mktemp -d "${TMPDIR:-/tmp}"/kak-weather.XXXXXXXX)/fifo
        url='wttr.in/?T'
        mkfifo ${output}
        ( curl ${url} > ${output} 2>&1 &) > /dev/null 2>&1 < /dev/null
        printf %s\\n "evaluate-commands %{
            edit! -fifo ${output} *weather*
            set-option buffer filetype wttrin
            hook -always -once buffer BufCloseFifo .* %{ nop %sh{ rm -r $(dirname ${output})} }
        }"
    }
}

# in lieu of autoload
# https://github.com/andreyorst/plug.kak/issues/83#issuecomment-864600718
evaluate-commands %sh{
    config_files="
        rspec.kak
        ide.kak
        keybinds.kak
    "

    for file in $config_files; do
        printf "%s" "
            try %{
                source %{${kak_config:?}/$file}
            } catch %{
                echo -debug %val{error}
            }
        "
    done
}

# TODO: add commands for upping/downing/redoing migration if it's current buffer
# like :ruby-alternate-file
define-command depot-reset-db -docstring 'Drop/create/seed depot databases' %{
    evaluate-commands -no-hooks %sh{
        output=$(mktemp -d "${TMPDIR:-/tmp}"/kak-rails-db-reset.XXXXXX)/fifo
        mkfifo ${output}
        (bin/rake db:drop db:create db:schema:load db:seed > ${output} 2>&1 &) > /dev/null 2>&1 < /dev/null
        (echo "######## PREPARING TEST DATABASES" > ${output} 2>&1 &) > /dev/null 2>&1 < /dev/null
        (RAILS_ENV=test bin/rake db:test:prepare db:seed > ${output} 2>&1 &) > /dev/null 2>&1 < /dev/null
        printf %s\\n "evaluate-commands %{
            edit! -fifo ${output} -scroll *depot-reset-db*
            set-option buffer filetype log
            hook -always -once buffer BufCloseFifo .* %{ nop %sh{ rm -r $(dirname ${output}) } }
        }"
    }
}
